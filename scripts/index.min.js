/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return toggleClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return smoothScrollTo; });
/**
 * Toggle active class from element
 * @param {*String} className 
 * @param {*String} keyWord 
 */
function toggleClass(className, keyWord) {
    document.querySelector('.' + className).classList.toggle(className + '_' + keyWord);
}

/**
 * Smooth scroll to element
 * @param {*String or html element} element 
 * @param {*Number} duration (ms) 
 */
function smoothScrollTo(element, duration) {
    /* checking type of element. If it's a string select this element by class name, else work whith html element */
    /* in other words we can pass in function class name or html element*/
    var targetBlock =
        typeof element === 'string' ?
        document.querySelector('.' + element) :
        element;

    var duration = duration || 300;
    var startPoint = window.pageYOffset;
    var distance = Math.ceil(targetBlock.getBoundingClientRect().top);
    var iteration = 120;
    var endPoint = distance + startPoint;
    var distancePerTick = distance / iteration;
    var sumParts = Math.ceil(startPoint + distancePerTick);
    var tickTime = Math.ceil(duration / iteration);

    var animate = setTimeout(function tick() {
        if (distance < 150 && distance > 0) {
            window.scrollTo(0, endPoint);
            return;
        }
        window.scrollTo(0, sumParts);
        iteration--;
        sumParts += distancePerTick;
        animate = setTimeout(tick, tickTime);
        if (iteration <= 0) {
            clearTimeout(animate);
        }
    }, tickTime)
}



/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_helpers__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_validator__ = __webpack_require__(5);
console.log('index page')



var autorizeBtn = document.querySelector('.autorization-btn');
var resumeBtn = document.querySelector('.resume');

/* Listen events for flip index page */
autorizeBtn.addEventListener('click', function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__common_helpers__["b" /* toggleClass */])('intro__content', 'active');
    autorizeBtn.style.visibility = 'hidden';
});
resumeBtn.addEventListener('click', function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__common_helpers__["b" /* toggleClass */])('intro__content', 'active');
    autorizeBtn.style.visibility = 'visible';
});


//=========================
/* Валидация формы */

// находим кнопку
const submitBtn = document.querySelector('.login__input-submit');

// представляем данные формы в виде объекта
let indexForm = {
    loginField: {
        element: document.querySelectorAll('.login__input')[0],
        popUp: document.querySelectorAll('.login__pop-up')[0]
    },
    passwordField: {
        element: document.querySelectorAll('.login__input')[1],
        popUp: document.querySelectorAll('.login__pop-up')[1]
    },
    showError(element) {
        element.element.classList.add('login__input_error');
        element.popUp.style.display = 'block';
        setTimeout(function() {
            element.popUp.style.display = 'none';
        }, 2000)
    },
    showCorrect(element) {
        element.element.classList.add('login__input_correct');
    },
    resetField(element, full = false) {
        element.popUp.style.display = 'none'
        element.element.className = 'login__input';
        if (full) {
            element.element.value = '';
        }
    }
}

// создаем конфиг, по каким парамертам будем проверять поля
const config = {
    login: ['isNonEmpty', 'isAlphaNum'],
    password: 'isNonEmpty'
}

// создаем экземпляр объекта валидатора
const validator = new __WEBPACK_IMPORTED_MODULE_1__common_validator__["a" /* default */](config);

// по щелчку мыши собираются данные из полей форм.
// сообщения об ошибках заносятся в массив validator.messages
// 
submitBtn.addEventListener('click', (e) => {
    e.preventDefault();
    let data = {
        login: indexForm.loginField.element.value,
        password: indexForm.passwordField.element.value
    };

    validator.validate(data);
    if (validator.hasErrors()) {

        indexForm.resetField(indexForm.loginField);
        indexForm.resetField(indexForm.passwordField);

        if (validator.messages.login) {

            indexForm.loginField.popUp.innerHTML = validator.messages.login;
            indexForm.showError(indexForm.loginField);

        }

        if (!validator.messages.login) {

            indexForm.showCorrect(indexForm.loginField);
            indexForm.passwordField.popUp.innerHTML = validator.messages.password;
            indexForm.showError(indexForm.passwordField);

        }

    } else {

        indexForm.showCorrect(indexForm.loginField);
        indexForm.showCorrect(indexForm.passwordField);

        // заглушка
        setTimeout(() => {
            indexForm.resetField(indexForm.loginField, true);
            indexForm.resetField(indexForm.passwordField, true);
        }, 3000);

    }
});

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Valedate form filds or eny strings
 * 
 * @class Validator
 * 
 * @param {Object} config 
 * @param {Object} types 
 */
class Validator {
    constructor(config, types) {
        this.config = config;
        this.messages = {};
        this.types = {
            isNonEmpty: {
                validate(value) {
                    return value.length !== 0;
                },
                instructions: 'Поле не может быть пустым'
            },
            isAlphaNum: {
                validate(value) {
                    return !/[^а-яА-Яa-zA-Z0-9]/i.test(value);
                },
                instructions: 'Поле может состоять только из букв и цифр, никаких специальных символов или пробелов'
            },
            isNumber: {
                validate(value) {
                    return !isNaN(value);
                },
                instructions: 'Значение, вводимое в поле, должно быть числом'
            }
        };

        if (types) {
            Object.assign(this.types, types);
        }

        console.log('Validator created!');
    }

    validate(data) {

        var i, msg, type, cheker, isOk, count;

        this.messages = {};

        for (i in data) {
            if (data.hasOwnProperty(i)) {
                type = this.config[i];

                if (Array.isArray(type)) {
                    count = type.length;
                } else {
                    count = 1;
                    type = [type];
                }

                for (var j = 0; j < count; j++) {

                    cheker = this.types[type[j]];

                    if (!type[j]) {
                        continue;
                    }

                    if (!cheker) {
                        throw {
                            name: 'ValidationError',
                            message: 'Не предусмотрено проверок!'
                        }
                    }

                    isOk = cheker.validate(data[i]);

                    if (!isOk) {
                        msg = cheker.instructions;

                        if (!this.messages[i]) {
                            this.messages[i] = [];
                        }

                        this.messages[i].push(msg);
                    }
                }
            }
        }
        return this.hasErrors();
    }
    hasErrors() {
        return Object.keys(this.messages).length !== 0;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Validator);

/***/ })
/******/ ]);